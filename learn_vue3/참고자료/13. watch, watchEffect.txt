watch
 - 종종 반응형 상태가 변경 되었을때에 감지하여 다른 작업(api call등)을 수행해야 하는 경우가 있다.
 - 예를 들어 어떠한 상태가 변경 되었을때 DOM을 변경하거나 비동기 작업을 해서 다른 상태를 변경하는 것이다.
 - Composition API의 watch 함수를 사용하여 반응형 상태가 변경될 때마다 특정 작업을 수행할 수 있다.
 - 13. watch 참조

watch source type
 - watch의 첫번째 매개변수는 다양한 타입이 될 수 있다. ref, reactive, computed, getter함수, array 타입일 될 수 있다.
 - 즉 위에 있는 매개변수들의 타입들은 다 watch가 가능하다.

 deep option
  - 반응형 객체를 직접 watch() 하면 암시적으로 깊은 감시자가 생성된다. 
  - 즉, 속성 뿐만 아니라 모든 중첩된 속성에도 트리거 된다.
  - getter function으로 객체를 넘길 경우에는 '객체의 값'이 바뀔 경우에만 트리거 된다.
  - 즉, 중첩된 속성은 트리거 되지 않는다. 

immediate 즉시실행
 - immediate 옵션을 사용하여 최초에 즉시실행 할 수 있다.
 - 또는 함수를 외부에 선언하여 즉시실행 할 수 있다. (watchEffect로 하면 더 단순화 할 수 있다.)

Computed vs Watch 
 - computed와 watch 둘다 비슷한 역할을 한다.
 - 용도
   - computed
     - Vue 인스턴스의 상태(ref, reactive 변수)의 종속 관계를 자동으로 세팅하고자 할때는 computed로 구현하는 것이 좋다.
     - 예) a는 b 값에 따라 결정되어지는 종속관계라 한다면, 이 종속관계 코드가 복잡해지면 watch로 구현할 경우 더 복잡해지거나 중복 계산 또는 오류를 발생시킬 수 있다.
   - watch
     - Vue 인스턴스의 상태(ref, reactive 변수)의 변경 시점에 특정 액션(call api, push route 등)을 취하고자 할때 적합하다.
     - 대게 computed로 구현 가능한 것이라면 watch가 아니라 computed 로 구현하는게 대부분 옳다.

watchEffect
 - watchEffect는 관련된 반응성 데이터에 변화가 감지되면 자동으로 반응하여 실행한다. 그리고 watchEffect의 코드는 컴포넌트가 생성될때 즉시 실행된다.

watch vs watchEffect
 - watch와 watchEffect 둘다 관련 작업(api call, push route등)을 반응적으로 수행할 수 있게 해준다. 하지만 주요한 차이점은 관련된 반응형 데이터를 추적하는 방식이다.
   - watch 
     - 명시적으로 관찰된 소스만 추적한다. 콜백 내에서 액세스한 항목은 추적하지 않는다. 
     - 또한, 콜백은 소스가 실제로 변경된 경우에만 트리거된다.
     - watch 종속성 추적을 부작용과 분리하여 콜백이 실행되어야 하는 시기를 보다 정확하게 제어할 수 있다.
   - watchEffect
     - 종속성 추적과 부작용을 한 단계로 결합한다. 동기 실행 중에 액세스되는 모든 반응 속성을 자동으로 추적한다.
     - 이것은 더 편리하고 일반적으로 더 간결한 코드를 생성하지만 반응성 종속성을 덜 명시적으로 만든다.










