<script setup>
 - <script setup>은 Single-File Component 내에서 Compostion API를 사용하기 위한 syntactic sugar(문법적 설탕)이다.
 - SFC와 Compostion API를 사용하는 경우 <script setup> 을 사용하는 것을 권장드린다. 왜냐하면 일반 <script> 구문보다 많은 장점을 제공하기 때문이다.
   - 간결한 문법으로 상용구 (boilerplate)를 줄일 수 있다.
   - 타입스크립트를 사용한 props와 emits 선언 가능
   - 런타임 성능의 향상(템플릿이 setup 스크립트와 같은 스코프(scope)에 있는 render함수로 컴파일되므로 프록시가 필요없다.)
   - 더 뛰어난 IDE 타입 추론 성능(language 서버가 코드로부터 타입을 추론해내는 데 비용이 덜 든다.)
   - 참고. syntactic sugar는 기능은 그대로인데 읽는 사람을 위해 직관적으로 쉽게 코드를 읽을 수 있게 만든다는 것이다.

기본 문법
 - <script> 블록에 setup 속성을 추가해서 시작하면 된다.

defineProps() & defineEmits()
 - defineProps() 와 defineEmits() APIs를 <script setup> 내에 선언하여 props와 emits을 사용할 수 있다.
   - defineProps와 defineEmits는 <script setup> 내부에서만 사용할 수 있는 컴파일러 매크로이다. 그렇기 때문에 import할 필요가 없으면 <script setup>이 처리될때 컴파일 된다.
   - defineProps는 props 옵션과 동일한 값을 허용한다. 그리고 defineEmits는 emits옵션과 동일한 값을 허용한다.
   - defineProps와 defineEmits는 전달된 옵션을 기반으로 타입 추론을 제공한다.
   - defineProps와 defineEmits에 전달된 옵션은 setup()에서 모듈영역으로 호이스트된다. 따라서 옵션은 setup()영역에 선언된 지역 변수를 참조할 수 없다. 만약 그렇게 하면 컴파일 오류가 발생한다. 
   - 하지만 import 된 옵션은 사용할 수 있다. 왜냐하면 import도 모듈 영역으로 호이스트 되기 때문이다.

defineExpose()
 - <script setup>을 사용하는 컴포넌트는 기본적으로 Template Refs나 $parent와 같이 컴포넌트간 통신이 닫혀 있다.
 - <script setup>을 사용하는 컴포넌트의 내부 데이터나 메서드를 명시적으로 노출하려면 defineExpose() 컴파일러 매크로를 사용할 수 있다. 
 - expose는 일반 <script> 에서도 사용할 수 있다.

useSlots() & useAttrs()
 - slots과 attrs는 <template> 내부에서 $slots와 $attrs로 직접 접근해서 사용할 수 있다. 만약 <script setup> 내부에서 slots과 attrs를 사용하고 싶다면 각각 useSlots(), useAttrs() helper 메서드를 사용할 수 있다.

<script> 와 <script setup> 함께 사용
 - <script setup> 은 normal <script>와 함께 사용할 수 있다.
   - 예를 들어 <script setup>에서 표현할 수 없는 inheritAttrs 옵션이나 Plugin을 통해 활성화된 Custom 옵션을 사용하고자 할때 normal <script>를 함께 선언한다.
   - named export를 선언했을때 (예. export const data)
   - 한번만 실행되어야 하는 로직이 있을때.

Top-level 'await'
 - <script setup> 내의 Top-level에서 await을 사용할 수 있다. 그리고 코드는 async setup() 이렇게 컴파일 된다.






