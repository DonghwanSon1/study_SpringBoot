Events
 - 자식 컴포넌트에서도 부모 컴포넌트로 데이터를 전달 또는 트리거의 목적으로 이벤트를 내보는것을 말한다. 그리고 이벤트는 컴포넌의 emit 메서드를 통하여 발생시킬수 있다.

이벤트 발생 및 수신 
 - 컴포넌트의 <template> 블록 안에서 내장 함수 $emit()을 사용하여 직접 커스텀한 이벤트를 내보낼 수 있다.
 - 그러면 부모 컴포넌트에서 v-on(또는 @)을 사용하여 이벤트를 수신할 수 있다. 
 - .once 수식어는 컴포넌트 커스텀 이벤트에서도 지원된다.

이벤트 파라미터
 - 이벤트와 함께 특정 값을 내보낼 수 있다. $emit 함수 이벤트명에 추가로 파라미터를 넘길 수 있다.

이벤트 선언하기
 - vue3에서는 emits 옵션을 사용하여 이벤트를 선언할 수 있다. 이때 이벤트 선언하는 방법은 두가지 형식으로 선언할 수 있다.
   - 문자열 배열 선언
     - PostCreate.vue, TheView.vue 참조
   - 객체문법 선언
     - PostCreate.vue, TheView.vue 참조
     - 객체문법으로 선언할 경우 validation 로직을 추가할 수 있다. 만약 validation이 없다면 null로 설정하면 된다.
     - 선택 사항이지만 컴포넌트가 작동하는 방식을 더 잘 문서화하기 위해 모든 이벤트를 정의하는 것이 좋다. 또한 Vue가 fallthrough속성 에서 알려진 리스너를 제외할 수 있다.
 - 그리고 JavaScript 코드에서 이벤트를 내보낼 때는 setup() 함수의 파라미터로 넘어온 context.emit()메서드를 사용할 수 있다.

v-model 만들기
 - 컴포넌트를 만든 후 해당 컴포넌트에 v-model을 적용하려면 @update:modelValue 이벤트를 사용하여 v-model을 만들수 있다.
 - 가져온 컴포넌트를 실제로 동작하게 하려면 컴포넌트를 정의해야 한다.
   - modelValue props를 :value 속성에 바인딩
   - @input 이벤트에서 새 @update:modelValue 이벤트로 내보낸다.

Computed 이용하기
 - 컴포넌트 안에서 computed를 사용하여 v-model을 구현할 수 있다.
 - 부모 컴포넌트에서는 v-on(@)디렉티브를 사용하여 자식 컴포넌트로부터 전달받은 이벤트를 수신할 수 있다.

v-model 전달인자
 - 기본적으로 v-model은 컴포넌트에서 modelValue props와 update:modelValue 이벤트로 사용한다.
 - 하지만 전달인자(Arguments)를 사용하여 이러한 이름을 수정할 수 있다.
 - 예를 들어 자식 컴포넌트에서는 :title 을 속성으로 정의하고 update:title로 이벤트를 내보내야 한다.

다중 v-model 바인딩
 - v-model 전달인자 를 사용하여 컴포넌트에 여러 v-model을 바인딩할 수 있다.










