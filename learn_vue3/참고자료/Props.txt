Props
 - 블로그를 구축하는 경우 블로그 게시글을 나타내는 컴포넌트가 있다고 가정을 해보면, 이때 모든 블로그 게시글의 UI나 레이아웃은 동일하지만 게시글의 제목, 내용과 같은 데이터는 각각 다르다.
 - 그러면 컴포넌트에 각각 제목이나 내용과 같은 데이터를 전달해야하는데 이때 Props를 사용하여 컴포넌트로 데이터(속성)를 전달할 수 있다.

Props란?
 - 컴포넌트에 등록할 수 있는 사용자 정의 속성이다. 블로그 게시글 컴포넌트에 사용자 정의 속성을 선언하면 이 컴포넌트를 사용하는 부모 컴포넌트에서 데이터(속성)를 전달할 수 있다.

Props 선언
 - Vue 컴포넌트에는 명시적 Props 선언이 필요하다. 왜냐하면 컴포넌트에 전달된 외부 Props가 fallthrough 속성으로 처리되어야 함을 알 수 있다.
   - fallthrough 속성 : Props 또는 emits에 명시적으로 선언되지 않은 속성 또는 이벤트

문자열 배열 선언
 - 컴포넌트에 Props 옵션을 사용하여 선언할 수 있다.

객체문법 선언
 - 문자열 배열을 사용하여 Props를 선언하는 것 외에도 객체 문법을 사용하여 속성 타입과 함께 선언 할수도 있다.
 - Props 선언시 key는 속성명이고 value는 속성 타입이다. 더 자세히 선언하고 싶다면 value에 고급 옵션인 객체를 선언할 수 있다.
   - type: String, Number, Boolean, Array, Object, Date, Function, Symbol 모든 기본 생성자 또는 모든 사용자 정의 타입이 올 수 있다. (예, Person, Animal) 그리고 [Number, String] 배열을 이용하여 여러개의 타입을 선언할 수 있다.
   - default: 속성값이 비어있거나 undefined를 전달 받는 경우 기본값을 선언할 수 있다. 그리고 객체 또는 배열 타입인 경우 기본값을 팩토리 함수를 사용하여 반환해야 한다.
   - required: 속성이 필수값이라면 true로 해서 설정할 수 있다.
   - validator: 속성값의 유효성 검사가 필요할 때 사용할 수 있다.
 - 컴포넌트 사용시 type, required, validator 명시된 사항을 위반할 때 개발모드에서 콘솔 경고가 발생된다.

Props 사용
 - 선언된 Props를 <template>에서 바로 사용할 수 있다.
 - setup() 함수의 첫번째 매개변수로 Props 객체를 받아 사용할 수 있다.
 - 컴포넌트 인스턴스(this)의 $props 객체로 접근할 수 있다. (Options API)

객체를 사용하여 다중 속성 전달
 - 객체의 모든 속성을 props로 전달하려는 경우 v-bind에 전달인자(예, v-bind:props-name) 없이 사용할 수 있다.
 - 예, v-bind="a" 랑 :id="a.id" :title="a.title" 와 같이 전달 방법은 동일하다.

단방향 데이터 흐름
 - 모든 props는 상위 속성과 하위 속성간에 단방향 바인딩으로 형성되어 있다. 만약 상위 속성이 업데이트되면 하위 속성도 업데이트되지만 그 반대는 아니다.
 - 이러한 서질은 하위 속성 변경 실수로 상위 속성을 변경하여 앱의 데이터 흐름을 이해하기 어렵게 만드는 것을 방지할 수 있다.
 - 또한 상위 컴포넌트가 업데이트될 때마다 하위 컴포넌트의 모든 props는 최신 상태도 초기화 된다.
 - 그렇기 때문에 자식 컴포넌트 내부에서 props를 변경하지 않아야 한다.
 - 일반적으로 props를 하위 컴포넌트에서 변경하고 싶은 두 가지 경우가 있다.
   1. prop은 초기 값을 전달하는 데 사용된다. 자식컴포넌트에서 속성 값을 로컬 데이터 속성으로 사용 하고자 할때이다. 이경우 prop을 초기값으로 사용하는 로컬 변수를 선언하는 것이 가장 좋다.
   2. prop의 값의 변환이 필요할 때이다. 이 경우 computed를 사용하면 좋다. 그리고 상위 속성의 변경을 유지할 수 있다.

객체 / 배열 props 업데이트
 - 객체나 배열이 props로 전달되면 자식 컴포넌트에서는 prop 바인딩(값 변경)을 변경할 수 없지만 객체 또는 배열의 중첩 속성은 변경할 수 있다.
 - 이것은 JavaScript에서 객체와 배열이 참조타입으로 전달되고 Vue가 이러한 변경을 방지하는 것은 부당한 비용이 들기 때문이다.
 - 이러한 변경의 단점은 하위 컴포넌트가 상위 컴포넌트에 명확하지 않는 방식으로 상위 속성 업데이트 하게 되면 잠재적으로 향후 데이터 흐름을 추론하기 어렵게 만든다는 것이다.
 - 그렇기 때문에 가장 좋은 방법은 부모와 자식이 의도적으로 밀접하게 연관되어 있지 않는한 이러한 변경은 피하는것이 좋다. 
 - 만약 변경이 필요하다면 자식 컴포넌트에서 emit을 이용하여 부모 컴포넌트가 스스로 변경을 수행할 수 있도록 이벤트를 내보내야 한다.

Boolean Casting
- Boolean타입의 props는 특별한 캐스팅 규칙이 있다.
- <MyComponent disabled /> => :disabled="true" 와 동일
- <MyComponent /> => :disabled="false" 와 동일




