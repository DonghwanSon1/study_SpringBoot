이벤트 처리
 - 이벤트 처리는 v-on 디렉티브로 사용할 수 있다. 그리고 v-on은 자주 사용하기 때문에 @ 단축표현으로 많이 사용한다.

메소드 이벤트 핸들러
 - v-on 디렉티브에서 메소드를 호출할 수 있다. 그리고 이때 매개변수로 event 객체를 받는다.
 - 예시 : 11 > app_event 참조

이벤트 객체 접근
 - 인라인 핸들링에서 event 객체에 접근할 수 있다. 접근하는 방법은 $event 키워드로 사용한다.
 - 예시 : 11 > app_event 참조

이벤트 수식어(Modifiers)
 - 이벤트를 조작할 때 이벤트 내부에서 event.preventDefault() 또는 event.stopPropagation()등 메서드를 호출한다.
 - 이러한 메소드의 호출은 어렵지 않지만 메소드 안에서 비즈니스 외에 이러한 코드는 비효율적이다.
 - 따라서 Vue는 v-on 이벤트에 다양한 이벤트 수식어(Modifiers)를 제공한다.
   - .stop = 이벤트가 전파되는 것을 중단시킨다. (== e.stopPropagation())
   - .prevent = 기본 이벤트의 자동 실행을 중단시킨다. (==e.preventDefault())
   - .capture = 캡쳐 모드를 사용할 때 이벤트 리스너를 사용 가능하다.
   - .self = 오로지 자기 자신만 호출할 수 있다. 즉, 타킷요소가 나여야 발동한다.
   - .once = 해당 이벤트는 '한번'만 실행된다.
   - .passive = 일반적으로 '모바일 장치의 성능을 개선' 하기 위해 터치 이벤트 리스너와 함께 사용한다.

키 수식어 
 - 키보드 이벤트를 수신할때 종종 특정 키를 확인해야 하는 경우가 있다. 그래서 Vue 에서는 @ 디렉티브에 키 수식어를 제공한다.
   - .enter
   - .tab
   - .delete(Backspace도 지원)
   - .esc
   - .space
   - .up
   - .down
   - .left
   - .right

시스템 키 수식어
 - 수식어를 사용해 해당 수식어 키가 눌러진 경우에만 마우스 또는 키보드 이벤트 리스너를 트리거 할 수 있다.
   - .ctrl
   - .alt
   - .shift
   - .meta (mac에선 command, 윈도우에선 윈도우키 이다)
