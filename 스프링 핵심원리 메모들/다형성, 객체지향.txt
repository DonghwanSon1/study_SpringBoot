- 다형성

• 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
• 다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야함
• 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.

- 객체 지향 프로그래밍

• 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러
개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지
를 주고받고, 데이터를 처리할 수 있다. (협력)
• 객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프
트웨어 개발에 많이 사용된다.

- 좋은 객체지향 설계의 5가지 원칙 (SOLID)

• SRP: 단일 책임 원칙(single responsibility principle) - 한 클래스는 하나의 책임만 가져야 한다.
• OCP: 개방-폐쇄 원칙 (Open/closed principle) - 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
 				            └> 문제점 : 구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다. 
				                   └=> 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.
• LSP: 리스코프 치환 원칙 (Liskov substitution principle) - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다
• ISP: 인터페이스 분리 원칙 (Interface segregation principle) - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
• DIP: 의존관계 역전 원칙 (Dependency inversion principle) - 구현 클래스에 의존하지 말고, 인터페이스에 의존해야 된다.
